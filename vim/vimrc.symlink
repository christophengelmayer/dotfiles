set nocompatible         				" We want the latest Vim settings/options.

"-------------Plugins--------------"
filetype off                			" required
" Set the runtime path to include Vundle and initialize.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'


" Navigation
Plugin 'CTrlpvim/ctrlp.vim'             " Fuzzy file, buffer, mru, tag, etc finder

" Search and Replace
Plugin 'rking/ag.vim'                   " plugin for the_silver_searcher, 'ag'
Plugin 'skwp/greplace.vim'              " Global search and replace
Plugin 'terryma/vim-multiple-cursors'   " Sublime Text like Multiple cursors
Plugin 'matze/vim-move'                 " Move blocks of text around

" Autocompletion, Formatting, Snippets etc.
" Plugin 'SirVer/ultisnips'               " The ultimate snippet solution for Vim. 
Plugin 'honza/vim-snippets'             " Default snippets
Plugin 'tpope/vim-surround'             " quoting/parenthesizing made simple
Plugin 'ervandew/supertab'              " Perform all your vim insert mode completions with Tab
Plugin 'jiangmiao/auto-pairs'           " insert or delete brackets, parens, quotes in pair
Plugin 'tpope/vim-commentary'           " Comment stuff out
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} "A parser for a condensed HTML format (aka. 'Emmet')

" Visual helpers
Plugin 'arcticicestudio/nord-vim'       " Color scheme
Plugin 'gorodinskiy/vim-coloresque'     " css/less/sass/html color preview
Plugin 'Yggdroot/indentLine'            " Display the indention levels with thin vertical lines

" Language/File specific plugins
Plugin 'sheerun/vim-polyglot'           " A solid language pack 
Plugin 'posva/vim-vue'                  " Syntax highlighting for Vue components.
Plugin 'mstruebing/vim.typoscript'      " Syntax highlighting for TypoScript / Fusion files


" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on               " required




"-------------Settings--------------"
syntax enable
set backspace=indent,eol,start			" Make backspace behave like every other editor.
let mapleader = ',' 			    	" The default is \, but a comma is much better.
set number					            " Let's activate line numbers.
set visualbell					        " don't beep
set t_vb=                               " disable visual bell (screen flash) 
set noerrorbells                        " don't beep
set scrolloff=3                         " Start scrolling slightly before the cursor reaches an edge
set sidescrolloff=5                     " Start scrolling slightly before the cursor reaches an edge
set sidescroll=1                        " Scroll sideways a character at a time, rather than a screen at a time
set clipboard=unnamed                   " Yank into system clipboard
set autowriteall                        " Automatically write the file when switching buffers.
set complete=.,w,b,u 					" Set our desired autocompletion matching.
set foldlevel=99                        " Unfold all folds by default
set ignorecase                          " ignore case when searching
set smartcase                           " ignore case if search pattern is all lowercase,
set whichwrap=h,l,b,<,>,~,[,]           " Allow motions over line-endings etc
autocmd TabEnter * stopinsert           " Start new tabs in normal mode
set showtabline=2                       " Always show tab bar (even for single file)
" Allow vertical motions in long lines
noremap j gj
noremap k gk
" Swap files out of the project root
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
" Hide banner in netrw
let g:netrw_banner = 0
" Files and directories to hide in netrw (^\.\.\=/\=$ removes /. and /..)
let g:netrw_list_hide= '.DS_Store,.sass-cache,^\.\.\=/\=$'
set synmaxcol=250                       "limit syntax highligthing to 250 chars




" -------------Tabs, indentation and lines-------------"
" 4 spaces please
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set shiftround                          " Round indent to nearest multiple of 4
set autoindent
filetype plugin indent on




"-------------Visuals--------------"
set background=dark 
colorscheme nord             " Set colorscheme

" colorscheme adjustments
hi TabLine     gui=none guibg=#2e3440
hi TabLineFill gui=none guibg=#2e3440
hi TabLineSel  gui=none guibg=#4c566a guifg=#d8dee9
let g:enable_italic_font = 1            " comments in italic

" Set the default font family and size.
" Download font here https://www.marksimonson.com/fonts/view/anonymous-pro
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Anonymous\ Pro\ 18
    elseif has("gui_macvim")
        set guifont=Anonymous\ Pro:h18
    endif
endif

set linespace=9   				        " Macvim-specific line-height.
set guioptions-=e					    " Disable GUI tabs
set guioptions-=m                       " Disable menu bar
set guioptions-=T                       " Disable toolbar

" Set linenumber background to background color
highlight LineNr guibg=bg 

" Disable Gui scrollbars.
set guioptions-=l					
set guioptions-=L
set guioptions-=r
set guioptions-=R

" don't hide certain text/symbols in markdown and json
set conceallevel=0




"-------------Search--------------"
set hlsearch							" Highlight all matched terms.
set incsearch							" Incrementally highlight, as we type.




"-------------Split Management--------------"
set splitbelow 							" Make splits default to below...
set splitright							" ...and to the right.

" Use arrow keys to switch between splits.
nmap <Down> <C-W><C-J>
nmap <Up> <C-W><C-K>
nmap <Left> <C-W><C-H>
nmap <Right> <C-W><C-L>




"-------------Mappings--------------"
" Make it easy to edit the Vimrc file.
nmap <Leader>ev :tabedit $MYVIMRC<cr>
" Make it easy to edit snippet files.
nmap <Leader>es :e ~/.vim/snippets/

" open netrw using [-]
nmap - :Ex<cr>

" Make it easy to run phpunit
nmap <Leader>t :!./vendor/bin/phpunit<cr>
nmap <Leader>tt :!./vendor/bin/phpunit --filter=

" Laravel Artisan commands
nmap <Leader>art :!php artisan 

" Composer commands
nmap <Leader>cd :!composer dump-autoload<cr>
nmap <Leader>cu :!composer update<cr>

" Add simple highlight removal.
nmap <Leader><space> :nohlsearch<cr>

" Quit insert mode using 'jj'
inoremap jj <ESC>

" Quick way to switch filetype 
nmap <Leader>h :set ft=html<cr>
nmap <Leader>p :set ft=php<cr>

" Make it easy to find and replace text
nmap <Leader>r :%s/

" Make it easy to open current project in finder
nmap <Leader>o :!open .<cr><cr>

" Indent lines by pressing > only once
nmap > >>




"-------------Syntax--------------"
au BufRead,BufNewFile *.inc set syntax=php      " use php syntax for *.inc files
au BufRead,BufNewFile *.fusion set filetype=typoscript




"-------------Plugins--------------"
"/
"/ CtrlP
"/
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store|bower_components\|vendor\|git'
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:30,results:30'
" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
map <D-p> :CtrlP<cr>


"/
"/ Greplace
"/
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'


"/
"/ indentLine 
"/
let g:indentLine_color_term = 239       " Line color
let g:indentLine_color_gui = '#333333'  " GUI line color
let g:indentLine_enabled = 1            " Display lines by default
let g:indentLine_char = '|'             " Set line character


"/
"/ Sparkup
"/ 
augroup sparkup_types
  " Remove ALL autocommands of the current group.
  autocmd!
  " Add sparkup to new filetypes
  autocmd FileType php,inc runtime! ftplugin/html/sparkup.vim
augroup END


"/
"/ vim-move
"/ 
let g:move_key_modifier = 'C'



"/
"/ ultisnips
"/ 
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"


"/
"/ commentary
"/ 
autocmd FileType typoscript setlocal commentstring=#\ %s




"-------------Auto-Commands--------------"
"Automatically source the Vimrc file on save.
augroup autosourcing
	autocmd!
	autocmd BufWritePost .vimrc source %
augroup END




"-------------Notes--------------"
" :Ag <searchterm>                        " Search in whole project
" :Gsearch                                " Project wide Search and replace in whole project
" :%s/foo/bar/g                           " Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.
" *                                       " Search for word under the cursor
" :PluginUpdate                           " Update all plugins
" :Ex                                     " Open directory listing
" <ctrl> + n                              " Multiple cursors keymapping
" :help key-notation                      " Key binfings help
